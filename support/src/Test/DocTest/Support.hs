-- | Description: Support functions for DocTest-driver.
-- Copyright: Copyright 2024, Ruifeng Xie
-- License: LGPL-3.0-or-later
-- Maintainer: Ruifeng Xie <ruifengx@outlook.com>
--
-- Support functions used by code generated by DocTest-driver.
module Test.DocTest.Support
  ( shouldMatch
  , ReplResult
  , ReplAction (..)
  ) where

import Control.DeepSeq (deepseq)
import Control.Exception (throwIO)
import Control.Monad (unless)
import Data.CallStack (HasCallStack, SrcLoc, callStack)
import Data.Kind (Type)
import Data.List.NonEmpty (NonEmpty ((:|)))
import Data.List.NonEmpty qualified as N (last)
import Test.DocTest.FuzzyMatch (match)
import Test.DocTest.FuzzySyntax (parsePattern)
import Test.HUnit.Lang (Assertion, FailureReason (..), HUnitFailure (..))

lastMaybe :: [a] -> Maybe a
lastMaybe []       = Nothing
lastMaybe (x : xs) = Just (N.last (x :| xs))

location :: HasCallStack => Maybe SrcLoc
location = snd <$> lastMaybe callStack

infix 1 `shouldMatch`

-- $setup
-- >>> import Control.Exception (try)

-- | Expect that the value @a@, when 'show'n, 'match'es the pattern string.
--
-- Simple usage: no pattern in the pattern string.
--
-- >>> try @HUnitFailure ((123 :: Int) `shouldMatch` "123")
-- Right ()
-- >>> try @HUnitFailure ((123 :: Int) `shouldMatch` "000")
-- Left (HUnitFailure (Just (SrcLoc {...})) (ExpectedButGot Nothing "000" "123"))
-- >>> try @HUnitFailure ("测试«αβ»" `shouldMatch` "\"\\27979\\35797\\171\\945\\946\\187\"")
-- Right ()
--
-- Advanced usage: @...@ for inline and multiline wildcard.
--
-- >>> try @HUnitFailure (True `shouldMatch` "T...e")
-- Right ()
-- >>> try @HUnitFailure ("some fancy string" `shouldMatch` "\"some ... string\"")
-- Right ()
--
-- >>> data Verbatim = Verbatim String
-- >>> instance Show Verbatim where show (Verbatim s) = s
-- >>> try @HUnitFailure (Verbatim "aaa\n\nbbb" `shouldMatch` "aaa\n...\nbbb")
-- Right ()
-- >>> try @HUnitFailure (Verbatim "aaa\nccc\nddd\nbbb" `shouldMatch` "aaa\n...\nbbb")
-- Right ()
shouldMatch :: (HasCallStack, Show a) => a -> String -> Assertion
shouldMatch actual expected = unless (match (parsePattern expected) sActual) onError
  where sActual = show actual
        err = HUnitFailure location (ExpectedButGot Nothing expected sActual)
        onError = expected `deepseq` sActual `deepseq` throwIO err

-- | Result type of running as a 'ReplAction'. Unfortunately, this cannot handle polymorphic types
-- without a known top-level type constructor.
type family ReplResult (a :: Type) :: Type where
  ReplResult (IO a) = a
  ReplResult a = a

-- | GHCi session supports both evaluating pure values and running 'IO' actions. Use this type
-- class to let the compiler deduce which one a test line should use.
class ReplAction a where
  -- | Embed into an 'IO' action.
  --
  -- >>> replAction (123 :: Int)
  -- 123
  -- >>> replAction (pure 123 :: IO Int)
  -- 123
  replAction :: a -> IO (ReplResult a)

instance a ~ ReplResult a => ReplAction a where
  replAction = pure

instance {-# OVERLAPPING #-} ReplAction (IO a) where
  replAction = id
