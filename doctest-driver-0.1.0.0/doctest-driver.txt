-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | DocTest driver based on extraction instead of GHCi.
--   
--   DocTest driver based on extraction instead of GHCi.
@package doctest-driver
@version 0.1.0.0


-- | DocTest extraction using the GHC API. GHC environment and options are
--   handled here.
module Test.DocTest.Driver.Extract.GHC

-- | Parse all the files in all the directories in the given list.
parseModulesIn :: [String] -> [FilePath] -> IO [ParsedModule]

-- | Parse all the files in the given list.
parseModules :: [String] -> [FilePath] -> IO [ParsedModule]


-- | Utility functions only used by the DocTest-driver itself during code
--   generation. These are not used at runtime by the generated code.
module Test.DocTest.Driver.Utils

-- | Split by the given separator.
--   
--   <pre>
--   &gt;&gt;&gt; splitBy ' ' "abc def"
--   ["abc","def"]
--   
--   &gt;&gt;&gt; splitBy ' ' "abc  def"
--   ["abc","","def"]
--   </pre>
splitBy :: Eq a => a -> [a] -> [[a]]

-- | <a>lines</a>, but with additional support for DOS line endings (CR
--   LF).
dosLines :: String -> [String]

-- | String segment for natural ordering.
data NaturalOrderString

-- | Preprocess a string to be compared in the "natural order".
--   
--   <ul>
--   <li>Natural order is lexicographical order if there is no digit
--   character:</li>
--   </ul>
--   
--   <pre>
--   &gt;&gt;&gt; naturalOrdered "abc" &lt; naturalOrdered "def"
--   True
--   </pre>
--   
--   <ul>
--   <li>Natural order considers 2 &lt; 10, while lexicographical order
--   insists 2 &gt; 10:</li>
--   </ul>
--   
--   <pre>
--   &gt;&gt;&gt; naturalOrdered "image2" &lt; naturalOrdered "image10"
--   True
--   </pre>
--   
--   <ul>
--   <li>However, using leading zeros opt into using lexicographical
--   order.</li>
--   </ul>
--   
--   <pre>
--   &gt;&gt;&gt; naturalOrdered "image02" &gt; naturalOrdered "image010"
--   True
--   
--   &gt;&gt;&gt; naturalOrdered "image100" &lt; naturalOrdered "image010"
--   True
--   </pre>
naturalOrdered :: String -> NaturalOrderString
instance GHC.Classes.Ord Test.DocTest.Driver.Utils.NaturalOrderString
instance GHC.Classes.Eq Test.DocTest.Driver.Utils.NaturalOrderString


-- | DocTests syntax trees and extraction from source code parsed using the
--   GHC API.
module Test.DocTest.Driver.Extract.Ast

-- | Best-effort source location.
type Loc = Either FastString RealSrcLoc

-- | Kind of declared entities.
data EntityKind

-- | Haddock section heading.
Section :: EntityKind

-- | <tt>data family</tt>.
DataFamily :: EntityKind

-- | <tt>type family</tt>, open or closed.
TypeFamily :: EntityKind

-- | <tt>newtype</tt>.
NewType :: EntityKind

-- | <tt>data</tt>.
DataType :: EntityKind

-- | <tt>type</tt>, type<i>kind</i>constraint synonym.
TypeSynonym :: EntityKind

-- | <tt>class</tt>, type classes.
Class :: EntityKind

-- | Top-level variable or function binding.
Binding :: EntityKind

-- | Top-level variable or function signature.
Signature :: EntityKind

-- | Pattern synonym definition.
PatternSynonym :: EntityKind

-- | Pattern synonym signature.
PatternSignature :: EntityKind

-- | <tt>foreign import</tt> declarations.
ForeignImport :: EntityKind

-- | <tt>foreign export</tt> declarations.
ForeignExport :: EntityKind

-- | Haddock markup, named chunk (<tt>$name</tt>).
NamedDoc :: EntityKind

-- | Declared entity information.
data Entity
Entity :: !EntityKind -> !FastString -> Entity

-- | Entity kind.
[$sel:kind:Entity] :: Entity -> !EntityKind

-- | Entity name.
[$sel:name:Entity] :: Entity -> !FastString

-- | Extract an <a>Entity</a> for the declaration.
--   
--   This is used to determine which declaration a Haddock document should
--   attach to.
--   
--   <ul>
--   <li><tt><a>Just</a> e</tt> if at least one entity is found, and
--   <tt>e</tt> is the first entity.</li>
--   <li><a>Nothing</a> if there is no entity the document could attach
--   to.</li>
--   </ul>
declEntity :: HsDecl GhcPs -> Maybe Entity

-- | Create a <a>NamedDoc</a> entity representing a named doc comment.
nameEntity :: String -> Entity

-- | Extracted module.
data Module
Module :: FilePath -> [String] -> [DocLine] -> [DocLine] -> [DocTests] -> Module

-- | Source file path to the original module.
[$sel:filePath:Module] :: Module -> FilePath

-- | Module name path, separated by dots (<tt>.</tt>).
[$sel:modulePath:Module] :: Module -> [String]

-- | List of import statements to be put at the top.
[$sel:importList:Module] :: Module -> [DocLine]

-- | Top-level setup code, e.g., data type definitions.
[$sel:topSetup:Module] :: Module -> [DocLine]

-- | Extracted test cases.
[$sel:testCases:Module] :: Module -> [DocTests]

-- | Extract a <a>Module</a> from a GHC <a>ParsedModule</a>.
--   
--   <h3>Implementation Note</h3>
--   
--   The documentation in a <a>ParsedModule</a> is first extracted into a
--   doc-tree (via <a>collectDocs</a>). By design, doctest instructions can
--   appear as group names (Haddock markup <tt>$group-name</tt>) and as
--   comments in verbatim code block (Haddock markup <tt>@...@</tt>).
--   Inside this doc-tree, we inspect these places, recognise the
--   instructions, and apply the instructions. Some instructions modify
--   their parent scope (<a>Capture</a>s and <a>IOHook</a>s bring new names
--   in scope), so we float them above.
extractModule :: ParsedModule -> Module

-- | Extracted DocTest items.
data DocTests

-- | Group, translated to <tt>describe</tt>.
Group :: Entity -> Loc -> [DocTests] -> DocTests

-- | Property, to be tested with QuickCheck.
TestProperty :: NonEmpty DocLine -> DocTests

-- | Example, compared with expected output.
TestExample :: NonEmpty ExampleLine -> DocTests

-- | Multiline tests.
TestMultiline :: NonEmpty DocLine -> DocTests

-- | Captured string literal.
Capture :: CapturedContent -> [DocTests] -> DocTests

-- | <a>IO</a> hook: <tt>before</tt>, <tt>beforeAll</tt>, <tt>after</tt>,
--   <tt>afterAll</tt>.
TestHook :: IOHook -> [DocTests] -> DocTests

-- | Problems detected while extracting the DocTests.
Warning :: Loc -> String -> DocTests

-- | A single line from the DocTests, rendered with <tt>{-# LINE ...
--   #-}</tt> and <tt>{-# COLUMN ... #-}</tt>.
data DocLine
DocLine :: Loc -> String -> DocLine

-- | Original source location.
[$sel:location:DocLine] :: DocLine -> Loc

-- | Content of the line.
[$sel:textLine:DocLine] :: DocLine -> String

-- | <a>span</a>, but also handles the <tt>location</tt> of
--   <a>DocLine</a>s.
spanDocLine :: (Char -> Bool) -> DocLine -> (String, DocLine)

-- | A single line of example, accompanied by several output lines.
data ExampleLine
ExampleLine :: DocLine -> [DocLine] -> ExampleLine

-- | Example line (code).
[$sel:programLine:ExampleLine] :: ExampleLine -> DocLine

-- | Output text lines.
[$sel:expectedOutput:ExampleLine] :: ExampleLine -> [DocLine]

-- | Captured text content, made available as a variable.
data CapturedContent
Captured :: String -> CaptureMethod -> NonEmpty String -> CapturedContent

-- | Name of the variable to bring into scope.
[$sel:variableName:Captured] :: CapturedContent -> String

-- | How the text content is captured.
[$sel:captureMethod:Captured] :: CapturedContent -> CaptureMethod

-- | Text content to be captured.
[$sel:textContent:Captured] :: CapturedContent -> NonEmpty String

-- | Different ways of capturing text contents.
data CaptureMethod

-- | <a>String</a> variable.
String :: CaptureMethod

-- | Strict <tt>Text</tt> variable (from <tt>Data.Text</tt>).
TextStrict :: CaptureMethod

-- | Lazy <tt>Text</tt> variable (from <tt>Data.Text.Lazy</tt>).
TextLazy :: CaptureMethod

-- | Strict <tt>ByteString</tt> variable (from <tt>Data.ByteString</tt>).
ByteStringStrict :: CaptureMethod

-- | Lazy <tt>ByteString</tt> variable (from
--   <tt>Data.ByteString.Lazy</tt>).
ByteStringLazy :: CaptureMethod

-- | <tt>ShortByteString</tt> variable (from
--   <tt>Data.ByteString.Short</tt>).
ShortByteString :: CaptureMethod

-- | Save as a temporary file, provide as a <a>FilePath</a> variable.
TempFile :: CaptureMethod

-- | <a>IO</a> actions to be performed throughout the test lifetime.
data IOHook
IOHook :: HookFlavour -> [String] -> NonEmpty DocLine -> IOHook

-- | Occasions when the <a>IO</a> action is expected to run.
[$sel:flavour:IOHook] :: IOHook -> HookFlavour

-- | List of variable names brought into scope by this hook.
[$sel:variables:IOHook] :: IOHook -> [String]

-- | The code for the action.
[$sel:setupCode:IOHook] :: IOHook -> NonEmpty DocLine

-- | Occasions to run an <a>IOHook</a>. <a>Around</a> and <a>AroundAll</a>
--   must capture the continuation as the first parameter.
data HookFlavour

-- | Once before each test case (result is freshly generated).
Before :: HookFlavour

-- | Once before all test cases (result is shared).
BeforeAll :: HookFlavour

-- | Once after each test case.
After :: HookFlavour

-- | Once after all test cases.
AfterAll :: HookFlavour

-- | Once around each test case (wrapper runs multiple times).
Around :: HookFlavour

-- | Once around all test cases (wrapper runs exactly once).
AroundAll :: HookFlavour
instance GHC.Classes.Ord Test.DocTest.Driver.Extract.Ast.EntityKind
instance GHC.Classes.Eq Test.DocTest.Driver.Extract.Ast.EntityKind
instance GHC.Show.Show Test.DocTest.Driver.Extract.Ast.EntityKind
instance GHC.Classes.Eq Test.DocTest.Driver.Extract.Ast.Entity
instance GHC.Classes.Eq Test.DocTest.Driver.Extract.Ast.DocLine
instance GHC.Show.Show Test.DocTest.Driver.Extract.Ast.DocLine
instance GHC.Classes.Eq Test.DocTest.Driver.Extract.Ast.ExampleLine
instance GHC.Show.Show Test.DocTest.Driver.Extract.Ast.ExampleLine
instance GHC.Classes.Eq Test.DocTest.Driver.Extract.Ast.CaptureMethod
instance GHC.Classes.Eq Test.DocTest.Driver.Extract.Ast.CapturedContent
instance GHC.Show.Show Test.DocTest.Driver.Extract.Ast.CapturedContent
instance GHC.Classes.Eq Test.DocTest.Driver.Extract.Ast.HookFlavour
instance GHC.Classes.Eq Test.DocTest.Driver.Extract.Ast.IOHook
instance GHC.Show.Show Test.DocTest.Driver.Extract.Ast.IOHook
instance GHC.Classes.Eq Test.DocTest.Driver.Extract.Ast.DocTests
instance GHC.Show.Show Test.DocTest.Driver.Extract.Ast.DocTests
instance GHC.Base.Monoid Test.DocTest.Driver.Extract.Ast.SetupCode
instance GHC.Base.Semigroup Test.DocTest.Driver.Extract.Ast.SetupCode
instance GHC.Generics.Generic Test.DocTest.Driver.Extract.Ast.SetupCode
instance GHC.Classes.Eq Test.DocTest.Driver.Extract.Ast.SetupCode
instance GHC.Show.Show Test.DocTest.Driver.Extract.Ast.SetupCode
instance GHC.Show.Show Test.DocTest.Driver.Extract.Ast.Module
instance Data.Traversable.Traversable Test.DocTest.Driver.Extract.Ast.DocTree
instance Data.Foldable.Foldable Test.DocTest.Driver.Extract.Ast.DocTree
instance GHC.Base.Functor Test.DocTest.Driver.Extract.Ast.DocTree
instance GHC.Show.Show a => GHC.Show.Show (Test.DocTest.Driver.Extract.Ast.DocTree a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Test.DocTest.Driver.Extract.Ast.DocTree a)
instance GHC.Classes.Eq Test.DocTest.Driver.Extract.Ast.Instruction
instance GHC.Classes.Eq Test.DocTest.Driver.Extract.Ast.DocGroup
instance GHC.Show.Show Test.DocTest.Driver.Extract.Ast.DocGroup
instance GHC.Show.Show Test.DocTest.Driver.Extract.Ast.LineType
instance GHC.Classes.Eq Test.DocTest.Driver.Extract.Ast.LineType
instance GHC.Show.Show Test.DocTest.Driver.Extract.Ast.Instruction
instance GHC.Base.Applicative Test.DocTest.Driver.Extract.Ast.DocTree
instance GHC.Base.Monad Test.DocTest.Driver.Extract.Ast.DocTree
instance GHC.Show.Show Test.DocTest.Driver.Extract.Ast.HookFlavour
instance GHC.Show.Show Test.DocTest.Driver.Extract.Ast.CaptureMethod
instance GHC.Show.Show Test.DocTest.Driver.Extract.Ast.Entity


-- | Extracting DocTests from source code parsed using the GHC API.
module Test.DocTest.Driver.Extract

-- | Extract a DocTest <a>Module</a> from each <a>FilePath</a>, with
--   specified compiler options.
extractDocTests :: [String] -> [FilePath] -> IO [Module]


-- | Pretty-printing for extracted information, intended for debugging
--   purposes.
module Test.DocTest.Driver.Extract.Dump

-- | Pretty-printing for extracted <a>Module</a> etc.
class Dump a

-- | Pretty-print to a GHC <a>Doc</a>.
dump :: Dump a => a -> Doc

-- | Pretty-print a list to a GHC <a>Doc</a>.
dumpList :: Dump a => [a] -> Doc

-- | Convenience function for converting a GHC <a>Doc</a> to a
--   <a>String</a>.
stringDoc :: Doc -> String

-- | Convenience function for print the GHC <a>Doc</a> to <a>stdout</a>.
printDoc :: Doc -> IO ()

-- | Convenience function for print the GHC <a>Doc</a> to a given
--   <a>Handle</a>.
hPrintDoc :: Handle -> Doc -> IO ()
instance Test.DocTest.Driver.Extract.Dump.Dump Test.DocTest.Driver.Extract.Ast.Module
instance Test.DocTest.Driver.Extract.Dump.Dump GHC.Types.Int
instance Test.DocTest.Driver.Extract.Dump.Dump GHC.Types.Char
instance Test.DocTest.Driver.Extract.Dump.Dump a => Test.DocTest.Driver.Extract.Dump.Dump (GHC.Maybe.Maybe a)
instance Test.DocTest.Driver.Extract.Dump.Dump a => Test.DocTest.Driver.Extract.Dump.Dump [a]
instance Test.DocTest.Driver.Extract.Dump.Dump a => Test.DocTest.Driver.Extract.Dump.Dump (GHC.Base.NonEmpty a)
instance Test.DocTest.Driver.Extract.Dump.Dump Test.DocTest.Driver.Extract.Ast.DocLine
instance Test.DocTest.Driver.Extract.Dump.Dump Test.DocTest.Driver.Extract.Ast.Loc
instance Test.DocTest.Driver.Extract.Dump.Dump GHC.Types.SrcLoc.RealSrcLoc
instance Test.DocTest.Driver.Extract.Dump.Dump Test.DocTest.Driver.Extract.Ast.DocTests
instance Test.DocTest.Driver.Extract.Dump.Dump Test.DocTest.Driver.Extract.Ast.ExampleLine
instance Test.DocTest.Driver.Extract.Dump.Dump Test.DocTest.Driver.Extract.Ast.Entity
instance Test.DocTest.Driver.Extract.Dump.Dump Test.DocTest.Driver.Extract.Ast.CapturedContent
instance Test.DocTest.Driver.Extract.Dump.Dump Test.DocTest.Driver.Extract.Ast.CaptureMethod
instance Test.DocTest.Driver.Extract.Dump.Dump Test.DocTest.Driver.Extract.Ast.IOHook
instance Test.DocTest.Driver.Extract.Dump.Dump Test.DocTest.Driver.Extract.Ast.HookFlavour


-- | Generating DocTests from extracted information.
module Test.DocTest.Driver.CodeGen

-- | Code generation monad.
--   
--   <ul>
--   <li>Collects generated text in a GHC <a>Doc</a>.</li>
--   <li>Tracks the file name and the line number for current line. We emit
--   <tt>{-# LINE ... #-}</tt> pragmas into the generated modules, but line
--   numbers also increase by one naturally after a linebreak. If the file
--   name does not change, and the natural line number matches the expected
--   one, then we omit the <tt>{-# LINE ... #-}</tt> pragma to avoid
--   cluttering the output.</li>
--   </ul>
data CodeGen a

-- | A document is code generation without a separate result.
type Doc = CodeGen ()

-- | Run the code generation and get the generated GHC <a>Doc</a>.
runDoc :: [String] -> Doc -> Doc

-- | Code generation entry-point for an extracted <a>Module</a>.
genModuleDoc :: Module -> Doc

-- | Perform code generation for all extracted <a>Module</a>s, together
--   with a <tt>Main</tt> module.
codeGen :: FilePath -> [Module] -> IO [FilePath]

-- | Perform code generation for a single extracted <a>Module</a>.
codeGenSingle :: FilePath -> Module -> IO FilePath
instance Control.Monad.State.Class.MonadState Test.DocTest.Driver.CodeGen.MFileLine Test.DocTest.Driver.CodeGen.CodeGen
instance Control.Monad.Writer.Class.MonadWriter Test.DocTest.Driver.CodeGen.MDoc Test.DocTest.Driver.CodeGen.CodeGen
instance Control.Monad.Reader.Class.MonadReader [GHC.Base.String] Test.DocTest.Driver.CodeGen.CodeGen
instance GHC.Base.Monad Test.DocTest.Driver.CodeGen.CodeGen
instance GHC.Base.Applicative Test.DocTest.Driver.CodeGen.CodeGen
instance GHC.Base.Functor Test.DocTest.Driver.CodeGen.CodeGen
instance GHC.Base.Monoid a => GHC.Base.Monoid (Test.DocTest.Driver.CodeGen.CodeGen a)
instance GHC.Base.Semigroup a => GHC.Base.Semigroup (Test.DocTest.Driver.CodeGen.CodeGen a)
instance Data.String.IsString Test.DocTest.Driver.CodeGen.Doc
instance GHC.Base.Semigroup Test.DocTest.Driver.CodeGen.MDoc
instance GHC.Base.Monoid Test.DocTest.Driver.CodeGen.MDoc
